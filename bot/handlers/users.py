from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.crud import CRUD
from app.keyboards.user import get_main_keyboard, get_faq_keyboard

router = Router()


class TicketCreation(StatesGroup):
    waiting_for_subject = State()
    waiting_for_description = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def create_ticket_start(message: Message, state: FSMContext):
    await state.set_state(TicketCreation.waiting_for_subject)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞:")


@router.message(TicketCreation.waiting_for_subject)
async def process_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await state.set_state(TicketCreation.waiting_for_description)
    await message.answer("üìÑ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")


@router.message(TicketCreation.waiting_for_description)
async def process_description(message: Message, state: FSMContext, crud: CRUD):
    data = await state.get_data()
    user = await crud.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    ticket = await crud.create_ticket(
        user_id=user.id,
        subject=data['subject'],
        description=message.text
    )

    await state.clear()
    await message.answer(
        f"‚úÖ –¢–∏–∫–µ—Ç #{ticket.id} —Å–æ–∑–¥–∞–Ω!\n"
        f"–¢–µ–º–∞: {ticket.subject}\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "‚ùì FAQ")
async def show_faq(message: Message):
    await message.answer(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
        reply_markup=get_faq_keyboard()
    )


@router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
async def show_ticket_history(message: Message, crud: CRUD):
    user = await crud.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    tickets = await crud.get_user_tickets(user.id)

    if not tickets:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    for ticket in tickets:
        status_emoji = "üü¢" if ticket.status == "open" else "üîµ" if ticket.status == "answered" else "üî¥"
        await message.answer(
            f"{status_emoji} –¢–∏–∫–µ—Ç #{ticket.id}\n"
            f"üìå –¢–µ–º–∞: {ticket.subject}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {ticket.status}"
        )


@router.callback_query(F.data.startswith("faq_"))
async def process_faq(callback: CallbackQuery):
    faq_type = callback.data.split("_")[1]

    faq_texts = {
        "create": "üìù –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç:\n1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'\n2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É\n3. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É",
        "time": "‚è±Ô∏è –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 1-4 —á–∞—Å–∞",
        "cancel": "‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–∏–∫–µ—Ç–∞"
    }

    await callback.message.edit_text(
        faq_texts.get(faq_type, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
        reply_markup=get_faq_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await callback.answer()